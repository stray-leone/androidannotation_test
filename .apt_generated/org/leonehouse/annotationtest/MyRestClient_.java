//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations 3.0.1.
//


package org.leonehouse.annotationtest;

import java.util.Collections;
import java.util.HashMap;
import org.androidannotations.api.rest.RestErrorHandler;
import org.leonehouse.annotationtest.data.TimeData;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.converter.json.MappingJacksonHttpMessageConverter;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;

public final class MyRestClient_
    implements MyRestClient
{

    private String rootUrl;
    private RestTemplate restTemplate;
    private RestErrorHandler restErrorHandler;

    public MyRestClient_() {
        rootUrl = "http://time.jsontest.com/";
        restTemplate = new RestTemplate();
        restTemplate.getMessageConverters().add(new MappingJacksonHttpMessageConverter());
    }

    @Override
    public Object getEventsByYearAndLocation(int year, String location) {
        HashMap<String, Object> urlVariables = new HashMap<String, Object>();
        urlVariables.put("location", location);
        urlVariables.put("year", year);
        try {
            return restTemplate.exchange(rootUrl.concat("/events/{year}/{location}"), HttpMethod.GET, null, Object.class, urlVariables).getBody();
        } catch (RestClientException e) {
            if (restErrorHandler!= null) {
                restErrorHandler.onRestClientExceptionThrown(e);
                return null;
            } else {
                throw e;
            }
        }
    }

    @Override
    public Object getEvents() {
        try {
            return restTemplate.exchange(rootUrl.concat(""), HttpMethod.GET, null, Object.class).getBody();
        } catch (RestClientException e) {
            if (restErrorHandler!= null) {
                restErrorHandler.onRestClientExceptionThrown(e);
                return null;
            } else {
                throw e;
            }
        }
    }

    @Override
    public TimeData getTime() {
        HttpHeaders httpHeaders = new HttpHeaders();
        httpHeaders.setAccept(Collections.singletonList(MediaType.parseMediaType("application/json")));
        HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
        try {
            return restTemplate.exchange(rootUrl.concat(""), HttpMethod.GET, requestEntity, TimeData.class).getBody();
        } catch (RestClientException e) {
            if (restErrorHandler!= null) {
                restErrorHandler.onRestClientExceptionThrown(e);
                return null;
            } else {
                throw e;
            }
        }
    }

    @Override
    public Object getEventsByLocationAndYear(String location, int year) {
        HashMap<String, Object> urlVariables = new HashMap<String, Object>();
        urlVariables.put("location", location);
        urlVariables.put("year", year);
        try {
            return restTemplate.exchange(rootUrl.concat("/events/{year}/{location}"), HttpMethod.GET, null, Object.class, urlVariables).getBody();
        } catch (RestClientException e) {
            if (restErrorHandler!= null) {
                restErrorHandler.onRestClientExceptionThrown(e);
                return null;
            } else {
                throw e;
            }
        }
    }

}
